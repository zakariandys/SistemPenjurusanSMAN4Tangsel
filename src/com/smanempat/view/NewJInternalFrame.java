/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.smanempat.view;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
//import com.smanempat.connection.DbConnection;
//import com.smanempat.model.ModelInternalFrame;
import com.smanempat.controller.ControllerInternalFrame;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Zakaria Andy S
 */
public class NewJInternalFrame extends javax.swing.JInternalFrame {

    private DefaultTableModel tableModel;
    private File fileName;
    private FileInputStream inputStream;
    private Object returnCellValue;
    private HSSFWorkbook workBooks;
    private HSSFSheet sheets;
    private HSSFRow rows;
    private HSSFCell cells;
    private XSSFWorkbook workBook;
    private XSSFSheet sheet;
    private XSSFRow row;
    private XSSFCell cell;
//    private DbConnection dbConnection;
//    public ModelInternalFrame modelInternalFrame;
    public ControllerInternalFrame controllerInternalFrame;

    private int rowValue;
    private int columnValue;
    private int type;

    private String[] columnName;
    public String[][] data;
    private String dataCell;
    private String query;
    public String tahun;
    public String nim;
    public String nama;
    public String nilai;

    public NewJInternalFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        labelTahunAjaran = new javax.swing.JLabel();
        labelPilihFile = new javax.swing.JLabel();
        txtFileDirectory = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        thnAjaran1 = new com.toedter.calendar.JYearChooser();
        thnAjaran2 = new com.toedter.calendar.JYearChooser();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePreview = new javax.swing.JTable();
        btnImport = new javax.swing.JButton();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Set"));

        labelTahunAjaran.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTahunAjaran.setText("Tahun Ajaran   :");

        labelPilihFile.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelPilihFile.setText("Pilih File            :");

        btnBrowse.setText("Browse..");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("/");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelTahunAjaran, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelPilihFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtFileDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBrowse))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(thnAjaran1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thnAjaran2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(939, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(labelTahunAjaran)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(thnAjaran1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(thnAjaran2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFileDirectory)
                            .addComponent(labelPilihFile)
                            .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Preview"));

        tablePreview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablePreview);

        btnImport.setText("Import to Database");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1275, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(btnImport)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImport, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(229, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Excel File", "xls", "xlsx");
            fileChooser.setFileFilter(fileFilter);

            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                txtFileDirectory.setText(fileChooser.getSelectedFile().getAbsolutePath());
                previewFile(evt);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Problem while upload file!", "Informasi Kesalahan Upload", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        // TODO add your handling code here:
        controllerInternalFrame = new ControllerInternalFrame();
        //int th = thnAjaran1.getYear();

        //System.out.println("coba ini" + data[0][1]);
        controllerInternalFrame.importToDatabase(rowValue, columnValue, data, thnAjaran1, thnAjaran2);
//        for (int b = 1; b < rowValue; b++) {
//            int c = 0;
//            while (c < columnValue) {
//                nim = data[b][c];
//                nama = data[b][c + 1];
//                nilai = data[b][c + 2];
////                System.out.println(nim + ", " + nama + ", " + nilai);
//                break;
//            }
//            System.out.println(nim + ", " + nama + ", " + nilai);
//            //insert(nim, nama, nilai);
//        }

//        controllerInternalFrame.importToDatabase(tahun, nim, nama, nilai);
        //importToDatabase();
    }//GEN-LAST:event_btnImportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnImport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelPilihFile;
    private javax.swing.JLabel labelTahunAjaran;
    private javax.swing.JTable tablePreview;
    private com.toedter.calendar.JYearChooser thnAjaran1;
    private com.toedter.calendar.JYearChooser thnAjaran2;
    private javax.swing.JTextField txtFileDirectory;
    // End of variables declaration//GEN-END:variables

    private void previewFile(ActionEvent evt) {
        try {
            if (txtFileDirectory.getText().endsWith(".xlsx")) {
                previewXLSX();
            } else if (txtFileDirectory.getText().endsWith(".xls")) {
                previewXLS();
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Some problem on previewFile() cause " + e);
        }
    }

    private void previewXLSX() throws FileNotFoundException, IOException {
        fileName = new File(txtFileDirectory.getText());
        inputStream = new FileInputStream(fileName);
        workBook = new XSSFWorkbook(inputStream);
        sheet = workBook.getSheetAt(0);

        rowValue = sheet.getLastRowNum() + 1;
        columnValue = sheet.getRow(0).getLastCellNum();
        data = new String[rowValue][columnValue];
        columnName = new String[columnValue];
        for (int i = 0; i < rowValue; i++) {
            row = sheet.getRow(i);
            for (int j = 0; j < columnValue; j++) {
                cell = row.getCell(j);
                type = cell.getCellType();

                returnCellValue = null;
                if (type == 0) {
                    returnCellValue = cell.getNumericCellValue();
                } else if (type == 1) {
                    returnCellValue = cell.getStringCellValue();
                }

                dataCell = returnCellValue.toString();
                data[i][j] = dataCell;
                //System.out.println("data['" + i + "']['" + j + "'] = '" + returnCellValue + "'");
            }
        }
        /*Set column name*/
        for (int i = 0; i < columnValue; i++) {
            columnName[i] = data[0][i];
        }

        for (int i = 1; i < rowValue; i++) {
            int j = 0;
            while (j < columnValue) {
                nim = data[i][j];
                nama = data[i][j + 1];
                nilai = data[i][j + 2];
                break;
            }
        }

        /*Set table model and show file on table*/
        tableModel = new DefaultTableModel(data, columnName);
        tablePreview.setModel(tableModel);
        tableModel.removeRow(0);
    }

    private void previewXLS() throws FileNotFoundException, IOException {
        fileName = new File(txtFileDirectory.getText());
        inputStream = new FileInputStream(fileName);
        workBooks = new HSSFWorkbook(inputStream);
        sheets = workBooks.getSheetAt(0);

        rowValue = sheets.getLastRowNum() + 1;
        columnValue = sheets.getRow(0).getLastCellNum();
        data = new String[rowValue][columnValue];
        columnName = new String[columnValue];
        for (int i = 0; i < rowValue; i++) {
            rows = sheets.getRow(i);
            for (int j = 0; j < columnValue; j++) {
                cells = rows.getCell(j);
                type = cells.getCellType();

                returnCellValue = null;
                if (type == 0) {
                    returnCellValue = cells.getNumericCellValue();
                } else if (type == 1) {
                    returnCellValue = cells.getStringCellValue();
                }

                dataCell = returnCellValue.toString();
                data[i][j] = dataCell;
                System.out.println("data['" + i + "']['" + j + "'] = '" + returnCellValue + "'");
            }
        }

        for (int i = 0; i < columnValue; i++) {
            columnName[i] = data[0][i];
        }

        for (int i = 1; i < rowValue; i++) {
            int j = 0;
            while (j < columnValue) {
                nim = data[j][i];
                nama = data[j][i + 1];
                nilai = data[j][i + 2];
                break;
            }
        }

        tableModel = new DefaultTableModel(data, columnName);
        tablePreview.setModel(tableModel);
        tableModel.removeRow(0);
    }

//    private void importToDatabase() {
//        modelInternalFrame = new ModelInternalFrame();
//        modelInternalFrame.setNim(nim);
//        modelInternalFrame.setNama(nama);
//        modelInternalFrame.setNilai(nilai);
//    }
}
